#!/usr/bin/env python3
"""
S16 Cross-Check Example
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É S16 –≥—Ä—É–ø–ø–∞–º–∏
"""

import asyncio
import argparse
from pathlib import Path
from tg_core.infra.tele_client import get_client
from tg_core.domain.groups import GroupManager
from apps.s16leads.app.config import get_space_group_id, get_space_group_name


async def s16_crosscheck(target_group_id: int, target_group_name: str = None, output_file: str = None):
    """
    –°–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã —Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–π –≥—Ä—É–ø–ø–æ–π s16 space
    
    Args:
        target_group_id: ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–≤–µ—Ä–∫–∏
        target_group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–¥–ª—è –æ—Ç—á–µ—Ç–æ–≤)
        output_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    print(f"üîç S16 Cross-Check: {target_group_name or target_group_id}")
    print("=" * 60)
    
    client = get_client()
    await client.start()
    manager = GroupManager(client)
    
    # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    space_id = get_space_group_id()
    space_name = get_space_group_name()
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        print(f"üìä –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {target_group_name or 'Unknown'} (ID: {target_group_id})")
        print(f"üìä –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –≥—Ä—É–ø–ø–∞: {space_name} (ID: {space_id})")
        print()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API)
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã...")
        target_participants = await manager.get_participants(target_group_id, limit=300)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(target_participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ {space_name}...")
        space_participants = await manager.get_participants(space_id, limit=500)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(space_participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print()
        
        # 3. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ)
        target_ids = {p['id'] for p in target_participants}
        space_ids = {p['id'] for p in space_participants}
        
        existing_in_space = target_ids & space_ids
        new_participants = target_ids - space_ids
        
        # 4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = {
            'target_group': target_group_name or str(target_group_id),
            'target_id': target_group_id,
            'space_group': space_name,
            'space_id': space_id,
            'total_target': len(target_participants),
            'total_space': len(space_participants),
            'existing_count': len(existing_in_space),
            'new_count': len(new_participants),
            'existing_percentage': len(existing_in_space) / len(target_participants) * 100,
            'new_percentage': len(new_participants) / len(target_participants) * 100,
            'existing_members': [],
            'new_members': []
        }
        
        # 5. –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        for p in target_participants:
            member_info = {
                'id': p['id'],
                'username': p.get('username'),
                'first_name': p.get('first_name'),
                'last_name': p.get('last_name'),
                'is_premium': p.get('is_premium', False)
            }
            
            if p['id'] in existing_in_space:
                result['existing_members'].append(member_info)
            else:
                result['new_members'].append(member_info)
        
        # 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_results(result)
        
        # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if output_file:
            await save_results(result, output_file)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    await client.disconnect()


def print_results(result: dict):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–í–ï–†–ö–ò:")
    print(f"üë• –í—Å–µ–≥–æ –≤ {result['target_group']}: {result['total_target']}")
    print(f"‚úÖ –£–∂–µ –≤ {result['space_group']}: {result['existing_count']} ({result['existing_percentage']:.1f}%)")
    print(f"üÜï –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {result['new_count']} ({result['new_percentage']:.1f}%)")
    print()
    
    if result['existing_members']:
        print(f"‚úÖ –£–ñ–ï –í {result['space_group'].upper()} ({len(result['existing_members'])} —á–µ–ª.):")
        for i, member in enumerate(result['existing_members'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            name = f"{member.get('first_name', '')} {member.get('last_name') or ''}".strip()
            username = member.get('username') or 'no_username'
            premium = 'üëë' if member.get('is_premium') else ''
            print(f"   {i:2d}. @{username} - {name} {premium}")
        
        if len(result['existing_members']) > 10:
            print(f"   ... –∏ –µ—â–µ {len(result['existing_members']) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        print()
    
    if result['new_members']:
        print(f"üÜï –ù–û–í–´–ï –£–ß–ê–°–¢–ù–ò–ö–ò ({len(result['new_members'])} —á–µ–ª.):")
        for i, member in enumerate(result['new_members'][:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            name = f"{member.get('first_name', '')} {member.get('last_name') or ''}".strip()
            username = member.get('username') or 'no_username'
            premium = 'üëë' if member.get('is_premium') else ''
            print(f"   {i:2d}. @{username} - {name} {premium}")
            
        if len(result['new_members']) > 10:
            print(f"   ... –∏ –µ—â–µ {len(result['new_members']) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


async def save_results(result: dict, output_file: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
    import json
    
    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")


async def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è S16 —Å–≤–µ—Ä–∫–∏"""
    parser = argparse.ArgumentParser(description='S16 Cross-Check: –°–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å s16 space')
    parser.add_argument('target_group', help='ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–≤–µ—Ä–∫–∏')
    parser.add_argument('--name', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã')
    parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (JSON)')
    
    args = parser.parse_args()
    
    try:
        target_id = int(args.target_group)
        await s16_crosscheck(target_id, args.name, args.output)
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: target_group –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º ID")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


if __name__ == "__main__":
    asyncio.run(main()) 