import os
import asyncio
from pathlib import Path
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from dotenv import load_dotenv
from telethon.tl.types import User
from .limiter import safe_call, get_rate_limiter

load_dotenv()

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = Path("data/sessions")
DATA_DIR.mkdir(parents=True, exist_ok=True)

api_id   = int(os.getenv("TG_API_ID", 0))
api_hash = os.getenv("TG_API_HASH", "")
session_name = os.getenv("SESSION_NAME", "s16_session")
session_path = str(DATA_DIR / session_name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not api_id or not api_hash:
    raise ValueError("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TG_API_ID –∏ TG_API_HASH –≤ .env —Ñ–∞–π–ª–µ")

_client = None

def get_client():
    global _client
    if _client is None:
        _client = TelegramClient(session_path, api_id, api_hash)
    return _client

async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —Å anti-spam –∑–∞—â–∏—Ç–æ–π"""
    try:
        client = get_client()
        await client.start()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_call –¥–ª—è get_me()
        me = await safe_call(client.get_me, operation_type="api")
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {me.username} (ID: {me.id})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É anti-spam —Å–∏—Å—Ç–µ–º—ã
        limiter = get_rate_limiter()
        stats = limiter.get_stats()
        print(f"üõ°Ô∏è  Anti-spam —Å—Ç–∞—Ç—É—Å: API calls: {stats['api_calls']}, RPS: {stats['current_rps']}")
        
        await client.disconnect()
        return True
    except SessionPasswordNeededError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        return False
    except PhoneCodeInvalidError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_connection())
