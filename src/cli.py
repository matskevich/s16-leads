#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ Telegram
"""

import asyncio
import argparse
import json
from pathlib import Path
from src.infra.tele_client import get_client
from src.core.group_manager import GroupManager

async def main():
    parser = argparse.ArgumentParser(description='S16-Leads: –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ Telegram')
    parser.add_argument('command', choices=['info', 'participants', 'search', 'export'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('group', help='Username –≥—Ä—É–ø–ø—ã (–±–µ–∑ @) –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã')
    parser.add_argument('--limit', type=int, default=100, 
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)')
    parser.add_argument('--query', help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã search)')
    parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥—ã export)')
    parser.add_argument('--format', choices=['json', 'csv'], default='json',
                       help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: json)')
    
    args = parser.parse_args()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = get_client()
        await client.start()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø
        group_manager = GroupManager(client)
        
        if args.command == 'info':
            await handle_info(group_manager, args.group)
            
        elif args.command == 'participants':
            await handle_participants(group_manager, args.group, args.limit, args.format)
            
        elif args.command == 'search':
            if not args.query:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã search –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --query")
                return
            await handle_search(group_manager, args.group, args.query, args.limit, args.format)
            
        elif args.command == 'export':
            if not args.output:
                print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã export –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --output")
                return
            await handle_export(group_manager, args.group, args.output, args.limit)
        
        await client.disconnect()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def handle_info(group_manager: GroupManager, group: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã info"""
    print(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {group}")
    
    info = await group_manager.get_group_info(group)
    if info:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {info['title']}")
        print(f"   ID: {info['id']}")
        print(f"   Username: @{info['username']}" if info['username'] else "   Username: –ù–µ—Ç")
        print(f"   –¢–∏–ø: {info['type']}")
        print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {info['participants_count']}")
    else:
        print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def handle_participants(group_manager: GroupManager, group: str, limit: int, format: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã participants"""
    print(f"üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã: {group} (–ª–∏–º–∏—Ç: {limit})")
    
    participants = await group_manager.get_participants(group, limit)
    
    if participants:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        if format == 'json':
            print(json.dumps(participants, ensure_ascii=False, indent=2))
        else:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
            for i, participant in enumerate(participants, 1):
                username = participant['username'] or '–ù–µ—Ç username'
                name = f"{participant['first_name'] or ''} {participant['last_name'] or ''}".strip()
                print(f"{i:3d}. {username} - {name}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

async def handle_search(group_manager: GroupManager, group: str, query: str, limit: int, format: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã search"""
    print(f"üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ {group} –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    participants = await group_manager.search_participants(group, query, limit)
    
    if participants:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        if format == 'json':
            print(json.dumps(participants, ensure_ascii=False, indent=2))
        else:
            for i, participant in enumerate(participants, 1):
                username = participant['username'] or '–ù–µ—Ç username'
                name = f"{participant['first_name'] or ''} {participant['last_name'] or ''}".strip()
                print(f"{i:3d}. {username} - {name}")
    else:
        print("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def handle_export(group_manager: GroupManager, group: str, output: str, limit: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã export"""
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {group} –≤ —Ñ–∞–π–ª: {output}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    output_path = Path(output)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    if output_path.suffix.lower() == '.csv':
        success = await group_manager.export_participants_to_csv(group, output, limit)
    else:
        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        participants = await group_manager.get_participants(group, limit)
        if participants:
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(participants, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ {output}")
            success = True
        else:
            success = False
    
    if not success:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")

if __name__ == "__main__":
    asyncio.run(main())
