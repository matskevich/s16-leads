#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ Telegram
"""

import asyncio
import json
from src.infra.tele_client import get_client
from src.core.group_manager import GroupManager

async def test_group_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏"""
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é)
    test_group = "python"  # –ì—Ä—É–ø–ø–∞ @python
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = get_client()
        await client.start()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä—É–ø–ø
        group_manager = GroupManager(client)
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
        print("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ:")
        group_info = await group_manager.get_group_info(test_group)
        if group_info:
            print(f"   ‚úÖ –ì—Ä—É–ø–ø–∞: {group_info['title']}")
            print(f"   üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group_info['participants_count']}")
            print(f"   üîó Username: @{group_info['username']}")
        else:
            print(f"   ‚ùå –ì—Ä—É–ø–ø–∞ {test_group} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print()
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        print("2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã:")
        participants = await group_manager.get_participants(test_group, limit=10)
        if participants:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
            for i, participant in enumerate(participants[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                username = participant['username'] or '–ù–µ—Ç username'
                name = f"{participant['first_name'] or ''} {participant['last_name'] or ''}".strip()
                print(f"   {i}. {username} - {name}")
            if len(participants) > 5:
                print(f"   ... –∏ –µ—â–µ {len(participants) - 5} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        print()
        
        # 3. –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("3Ô∏è‚É£ –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        search_results = await group_manager.search_participants(test_group, "admin", limit=5)
        if search_results:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å 'admin':")
            for i, participant in enumerate(search_results, 1):
                username = participant['username'] or '–ù–µ—Ç username'
                name = f"{participant['first_name'] or ''} {participant['last_name'] or ''}".strip()
                print(f"   {i}. {username} - {name}")
        else:
            print("   ‚ÑπÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å 'admin' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print()
        
        # 4. –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        print("4Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ JSON:")
        export_file = "data/export/participants_sample.json"
        participants_for_export = await group_manager.get_participants(test_group, limit=20)
        if participants_for_export:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            from pathlib import Path
            Path(export_file).parent.mkdir(parents=True, exist_ok=True)
            
            with open(export_file, 'w', encoding='utf-8') as f:
                json.dump(participants_for_export, f, ensure_ascii=False, indent=2)
            print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(participants_for_export)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ {export_file}")
        else:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        await client.disconnect()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(test_group_functions()) 