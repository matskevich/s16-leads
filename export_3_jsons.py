#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø –≤ 3 JSON —Ñ–∞–π–ª–∞
–ò–°–ü–û–õ–¨–ó–£–ï–¢ S16-leads –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—É
"""

import asyncio
import json
import os
from datetime import datetime
from typing import Dict, List, Set

from tg_core.infra.tele_client import get_client
from tg_core.infra.limiter import get_rate_limiter, smart_pause
from tg_core.domain.groups import GroupManager
import logging

logger = logging.getLogger(__name__)

# –í–∞—à —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
GROUP_IDS = [
    -1002188344480,  # s16 space
    -1002609724956,  # –ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫ '25
    -1002214341140,  # S16 Festival // Landing
    -1001527724829,  # S16 Open Coliving '22
    -1001267405994,  # S16 (ne)Sl√´t
    -1001709503226,  # Coliving '23
    -1002540509234,  # S16 Coliving DOMA
    -1001631833231,  # s16 camp on waking life
    -1002507355081,  # –ü–∞—Å—Ö–∞ 2025
    -1001393171192,  # Shmit16 21 ‚Äî Coliving
    -1001454118014,  # Shmit16 @ Anatman 2019
    -1001461037525,  # Halloween Party
    -1001926931511,  # New Year on Madeira
]

async def export_to_3_jsons():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ 3 JSON —Ñ–∞–π–ª–∞ —Å –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–æ–π"""
    
    print("üöÄ –≠–∫—Å–ø–æ—Ä—Ç –≤ 3 JSON —Ñ–∞–π–ª–∞ —Å –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç–æ–π...")
    print(f"üìä –ì—Ä—É–ø–ø –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(GROUP_IDS)}")
    print("")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    client = get_client()
    await client.start()
    
    rate_limiter = get_rate_limiter()
    manager = GroupManager(client)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    groups = []           # –¥–ª—è groups.json
    all_members = {}      # –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ members
    group_members = []    # –¥–ª—è group_members.json
    
    # –≠–¢–ê–ü 1: –°–æ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    print("=" * 50)
    print("–≠–¢–ê–ü 1: –°–ë–û–† –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    for i, group_id in enumerate(GROUP_IDS, 1):
        try:
            print(f"üìä {i:2d}/{len(GROUP_IDS)} –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {group_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_info = await manager.get_group_info(group_id)
            if not group_info:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ")
                continue
                
            print(f"   üìù {group_info['title']} ({group_info.get('participants_count', '?')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ groups (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π group_id, –∞ –Ω–µ —Ç–æ—Ç —á—Ç–æ –∏–∑ API)
            groups.append({
                "group_id": group_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID –∏–∑ —Å–ø–∏—Å–∫–∞
                "title": group_info['title']
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await manager.get_participants(group_id, limit=None)
            if not participants:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for participant in participants:
                user_id = participant['id']
                
                # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                if user_id not in all_members:
                    all_members[user_id] = {
                        "user_id": user_id,
                        "username": participant.get('username'),
                        "first_name": participant.get('first_name'),
                        "last_name": participant.get('last_name'),
                        "is_premium": participant.get('is_premium', False),
                        "is_verified": participant.get('is_verified', False)
                    }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≥—Ä—É–ø–ø–∞-—É—á–∞—Å—Ç–Ω–∏–∫
                group_members.append({
                    "group_id": group_id,
                    "user_id": user_id
                })
            
            print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            
            # Smart pause –∫–∞–∂–¥—ã–µ 3 –≥—Ä—É–ø–ø—ã
            if i % 3 == 0 and i < len(GROUP_IDS):
                await smart_pause("export", i)
                print(f"   ‚è≥ –ü–∞—É–∑–∞ –¥–ª—è –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—ã...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            continue
        
        print("")
    
    # –≠–¢–ê–ü 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤
    print("=" * 50)
    print("–≠–¢–ê–ü 2: –°–û–•–†–ê–ù–ï–ù–ò–ï JSON –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = f"data/export/s16_export_{timestamp}"
    os.makedirs(output_dir, exist_ok=True)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º members –≤ —Å–ø–∏—Å–æ–∫
    members = list(all_members.values())
    
    # 1. groups.json
    groups_file = f"{output_dir}/groups.json"
    groups_data = {
        "groups": groups
    }
    with open(groups_file, 'w', encoding='utf-8') as f:
        json.dump(groups_data, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ {groups_file} - {len(groups)} –≥—Ä—É–ø–ø")
    
    # 2. members.json  
    members_file = f"{output_dir}/members.json"
    members_data = {
        "members": members
    }
    with open(members_file, 'w', encoding='utf-8') as f:
        json.dump(members_data, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ {members_file} - {len(members)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    # 3. group_members.json
    group_members_file = f"{output_dir}/group_members.json"
    group_members_data = {
        "group_members": group_members
    }
    with open(group_members_file, 'w', encoding='utf-8') as f:
        json.dump(group_members_data, f, ensure_ascii=False, indent=2)
    print(f"‚úÖ {group_members_file} - {len(group_members)} —Å–≤—è–∑–µ–π")
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print("\n" + "=" * 50)
    print("üéâ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 50)
    
    stats = rate_limiter.get_stats()
    print(f"üõ°Ô∏è –ê–Ω—Ç–∏-—Å–ø–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ API –≤—ã–∑–æ–≤–æ–≤: {stats['api_calls']}")
    print(f"   ‚Ä¢ FLOOD_WAIT –æ—à–∏–±–æ–∫: {stats['flood_waits']}")
    print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π RPS: {stats['current_rps']}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ –ì—Ä—É–ø–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(groups)}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(members)}")
    print(f"   ‚Ä¢ –°–≤—è–∑–µ–π –≥—Ä—É–ø–ø–∞-—É—á–∞—Å—Ç–Ω–∏–∫: {len(group_members)}")
    print(f"   ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    await client.disconnect()
    return True

if __name__ == "__main__":
    print("üìã –≠–∫—Å–ø–æ—Ä—Ç 13 S16 –≥—Ä—É–ø–ø –≤ 3 JSON —Ñ–∞–π–ª–∞")
    print("üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω—Ç–∏-—Å–ø–∞–º –∑–∞—â–∏—Ç—É S16-leads")
    print("")
    
    success = asyncio.run(export_to_3_jsons())
    if success:
        print("\nüéØ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢—Ä–∏ JSON —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–Ω—ã.")
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")