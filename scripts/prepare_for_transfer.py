#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ S16-Leads –∫ –ø–µ—Ä–µ–¥–∞—á–µ –¥—Ä—É–≥–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤.
"""

import os
import sys
import shutil
import zipfile
from pathlib import Path
from datetime import datetime


def print_header():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ S16-Leads - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 50)


def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ git...")
    
    if not Path(".git").exists():
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    import subprocess
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout)
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
            if response != 'y':
                return False
        else:
            print("‚úÖ Git —Å—Ç–∞—Ç—É—Å —á–∏—Å—Ç—ã–π")
    except FileNotFoundError:
        print("‚ö†Ô∏è  Git –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        
    return True


def find_sensitive_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    sensitive_patterns = [
        ".env",
        "data/sessions/*.session",
        "data/export/*",
        "data/anti_spam/*",
        "data/logs/*",
        "*.pyc",
        "__pycache__",
        "venv/",
        ".DS_Store"
    ]
    
    found_files = []
    
    for pattern in sensitive_patterns:
        if "*" in pattern:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ wildcard –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            import glob
            matches = glob.glob(pattern, recursive=True)
            found_files.extend(matches)
        else:
            if Path(pattern).exists():
                found_files.append(pattern)
    
    if found_files:
        print("üîç –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in found_files:
            print(f"   - {file}")
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return found_files


def create_transfer_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    transfer_dir = Path(f"../s16-leads-transfer-{timestamp}")
    
    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏: {transfer_dir}")
    
    if transfer_dir.exists():
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {transfer_dir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        response = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").lower()
        if response != 'y':
            return None
        shutil.rmtree(transfer_dir)
    
    transfer_dir.mkdir()
    return transfer_dir


def copy_safe_files(transfer_dir):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥–∞—á–∏"""
    print(f"\nüìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ {transfer_dir}...")
    
    # –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    exclude_patterns = {
        '.env',
        'data/sessions',
        'data/export', 
        'data/logs',
        'data/anti_spam',
        '__pycache__',
        '.git',
        'venv',
        '.DS_Store',
        '.pytest_cache'
    }
    
    def should_exclude(path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É"""
        for pattern in exclude_patterns:
            if pattern in str(path):
                return True
        return False
    
    copied_count = 0
    skipped_count = 0
    
    for item in Path(".").rglob("*"):
        if should_exclude(item):
            skipped_count += 1
            continue
            
        relative_path = item.relative_to(".")
        target_path = transfer_dir / relative_path
        
        try:
            if item.is_file():
                target_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(item, target_path)
                copied_count += 1
            elif item.is_dir():
                target_path.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item}: {e}")
    
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {copied_count}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {skipped_count}")


def create_clean_env_sample(transfer_dir):
    """–°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—ã–π .env.sample —Ñ–∞–π–ª"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ .env.sample...")
    
    env_sample_content = """# Telegram API –∫–ª—é—á–∏ (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://my.telegram.org/apps)
TG_API_ID=
TG_API_HASH=
SESSION_NAME=s16_session

# Anti-spam –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RATE_RPS=4                      # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
MAX_DM_PER_DAY=20              # –ú–∞–∫—Å–∏–º—É–º DM –≤ —Å—É—Ç–∫–∏
MAX_JOINS_PER_DAY=20           # –ú–∞–∫—Å–∏–º—É–º join/leave –≤ —Å—É—Ç–∫–∏
MAX_GROUPS=200                 # –ú–∞–∫—Å–∏–º—É–º –≥—Ä—É–ø–ø –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=INFO
SAFE_LOG_ENABLED=true
DATA_DIR=data
SESSIONS_DIR=data/sessions
EXPORT_DIR=data/export
ANTI_SPAM_DIR=data/anti_spam
LOGS_DIR=data/logs

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SESSION_PERMISSIONS=600
ENABLE_2FA_CHECK=true
CHECK_USERNAME=true
CHECK_PROFILE_PHOTO=true
CHECK_BIO=true
WARMUP_PERIOD_HOURS=24

# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
DEBUG_MODE=false
TEST_MODE=false
DRY_RUN=false
"""
    
    env_file = transfer_dir / ".env.sample"
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_sample_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —á–∏—Å—Ç—ã–π .env.sample")


def create_setup_script(transfer_dir):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    setup_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ S16-Leads

echo "üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ S16-Leads"
echo "================================"

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv venv

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üîß –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    source venv/Scripts/activate
else
    source venv/bin/activate
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install --upgrade pip
pip install -r requirements.txt

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p data/sessions
mkdir -p data/export
mkdir -p data/anti_spam
mkdir -p data/logs

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
if [ ! -f ".env" ]; then
    cp .env.sample .env
    echo "‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞"
    echo ""
    echo "‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ Telegram API –∫–ª—é—á–∏:"
    echo "   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org/apps"
    echo "   2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "   3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ api_id –∏ api_hash –≤ .env —Ñ–∞–π–ª"
    echo ""
else
    echo "‚ÑπÔ∏è  .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
echo "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chmod 600 data/sessions/* 2>/dev/null || true
chmod 700 data/sessions

echo ""
echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "   1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª (–¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏)"
echo "   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 src/infra/tele_client.py"
echo "   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python3 examples/list_my_chats.py"
echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/TRANSFER_GUIDE.md"
"""
    
    setup_file = transfer_dir / "setup.sh"
    with open(setup_file, 'w', encoding='utf-8') as f:
        f.write(setup_script)
    
    # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(setup_file, 0o755)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç setup.sh")


def create_archive(transfer_dir):
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤"""
    print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞...")
    
    archive_name = f"{transfer_dir.name}.zip"
    archive_path = transfer_dir.parent / archive_name
    
    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for file in transfer_dir.rglob("*"):
            if file.is_file():
                arcname = file.relative_to(transfer_dir.parent)
                zipf.write(file, arcname)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {archive_path}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
    size_mb = archive_path.stat().st_size / (1024 * 1024)
    print(f"üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {size_mb:.1f} MB")
    
    return archive_path


def print_summary(transfer_dir, archive_path):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print("\n" + "=" * 50)
    print("‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ü–ï–†–ï–î–ê–ß–ï –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 50)
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {transfer_dir}")
    print(f"üì¶ –ê—Ä—Ö–∏–≤: {archive_path}")
    print()
    print("üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:")
    print("   ‚úÖ –í–µ—Å—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥")
    print("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–≤–∫–ª—é—á–∞—è TRANSFER_GUIDE.md)")
    print("   ‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("   ‚úÖ –¢–µ—Å—Ç—ã") 
    print("   ‚úÖ –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (setup.sh)")
    print("   ‚úÖ –ß–∏—Å—Ç—ã–π .env.sample")
    print()
    print("üîí –ß—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–æ:")
    print("   ‚ùå .env —Ñ–∞–π–ª (API –∫–ª—é—á–∏)")
    print("   ‚ùå –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Telegram")
    print("   ‚ùå –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("   ‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    print("   ‚ùå Cache —Ñ–∞–π–ª—ã")
    print()
    print("üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∞:")
    print("   1. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bash setup.sh")
    print("   3. –ß–∏—Ç–∞–π—Ç–µ: docs/TRANSFER_GUIDE.md")
    print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print_header()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not Path("src").exists() or not Path("README.md").exists():
            print("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ S16-Leads")
            sys.exit(1)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ git —Å—Ç–∞—Ç—É—Å–∞
        if not check_git_status():
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)
        
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        sensitive_files = find_sensitive_files()
        
        if sensitive_files:
            print("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã. –û–Ω–∏ –ù–ï –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø–µ—Ä–µ–¥–∞—á—É.")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower()
            if response != 'y':
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                sys.exit(1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏
        transfer_dir = create_transfer_directory()
        if not transfer_dir:
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        copy_safe_files(transfer_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ .env.sample
        create_clean_env_sample(transfer_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        create_setup_script(transfer_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
        archive_path = create_archive(transfer_dir)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print_summary(transfer_dir, archive_path)
        
        print("üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ!")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 