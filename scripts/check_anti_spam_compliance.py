#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞–Ω—Ç–∏-—Å–ø–∞–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ S16-leads
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ Telegram API –≤—ã–∑–æ–≤—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç safe_call –æ–±–µ—Ä—Ç–∫–∏
"""

import os
import re
import sys
from pathlib import Path
from typing import List, Tuple, Dict

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
DANGEROUS_PATTERNS = [
    # –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã –∫ client –±–µ–∑ safe_call
    r'await\s+(?:self\.)?client\.(get_entity|iter_participants|iter_dialogs|send_message|get_participants)',
    r'(?:self\.)?client\.(get_entity|iter_participants|iter_dialogs|send_message|get_participants)',
    
    # Async for loops —Å client
    r'async\s+for\s+\w+\s+in\s+(?:self\.)?client\.',
    
    # –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã telethon —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏
    r'from\s+telethon\.tl\.functions\s+import.*\n.*await\s+client\(',
]

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∏—Å–∫–ª—é—á–µ–Ω–∏—è)
ALLOWED_PATTERNS = [
    r'await\s+_safe_api_call\(',
    r'await\s+safe_call\(',
    r'client\.start\(\)',
    r'client\.disconnect\(\)',
    r'client\.get_me\(',  # –í tele_client.py –µ—Å—Ç—å safe_call –æ–±–µ—Ä—Ç–∫–∞
    # Wrapper —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ safe_call - –¥–æ–ø—É—Å—Ç–∏–º—ã
    r'async\s+def\s+\w+.*:\s*$',  # –ù–∞—á–∞–ª–æ async —Ñ—É–Ω–∫—Ü–∏–∏
    r'async\s+for.*in\s+self\.client\..*:\s*$',  # –í–Ω—É—Ç—Ä–∏ wrapper —Ñ—É–Ω–∫—Ü–∏–∏
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    r'#.*client\.',
    r'""".*client\..*"""',
    r"'''.*client\..*'''",
]

# –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
INCLUDE_PATTERNS = [
    '**/*.py'
]

# –§–∞–π–ª—ã/–ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
EXCLUDE_PATTERNS = [
    'venv/**',
    '.venv/**',
    'env/**',
    '.env/**',
    '**/__pycache__/**',
    'tests/**',  # –í —Ç–µ—Å—Ç–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä—è–º—ã–µ –º–æ–∫–∏
    'scripts/check_anti_spam_compliance.py',  # –≠—Ç–æ—Ç —Ñ–∞–π–ª
    '.git/**',
    'node_modules/**',
    '**/*.pyc',
    'build/**',
    'dist/**',
]

class AntiSpamChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –∞–Ω—Ç–∏-—Å–ø–∞–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.violations: List[Dict] = []
        
    def check_file(self, file_path: Path) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –∞–Ω—Ç–∏-—Å–ø–∞–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        violations = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                
            # –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ wrapper —Ñ—É–Ω–∫—Ü–∏–π (–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø—É—Å—Ç–∏–º—ã)
            wrapper_areas = self._find_wrapper_function_areas(content, lines)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern in DANGEROUS_PATTERNS:
                matches = re.finditer(pattern, content, re.MULTILINE | re.IGNORECASE)
                
                for match in matches:
                    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                    line_num = content[:match.start()].count('\n') + 1
                    line_content = lines[line_num - 1].strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                    is_allowed = False
                    
                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    for allowed_pattern in ALLOWED_PATTERNS:
                        if re.search(allowed_pattern, line_content, re.IGNORECASE):
                            is_allowed = True
                            break
                    
                    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–µ –≤–Ω—É—Ç—Ä–∏ wrapper —Ñ—É–Ω–∫—Ü–∏–∏
                    if not is_allowed:
                        for start_line, end_line in wrapper_areas:
                            if start_line <= line_num <= end_line:
                                is_allowed = True
                                break
                    
                    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç safe_call –∏–ª–∏ _safe_api_call
                    if not is_allowed:
                        context_lines = lines[max(0, line_num-3):line_num+3]
                        context = ' '.join(context_lines)
                        if 'safe_call' in context or '_safe_api_call' in context:
                            is_allowed = True
                    
                    if not is_allowed:
                        violations.append({
                            'file': str(file_path.relative_to(self.project_root)),
                            'line': line_num,
                            'content': line_content,
                            'pattern': pattern,
                            'match': match.group(),
                            'severity': 'CRITICAL'
                        })
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file_path}: {e}")
            
        return violations
    
    def _find_wrapper_function_areas(self, content: str, lines: List[str]) -> List[Tuple[int, int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ wrapper —Ñ—É–Ω–∫—Ü–∏–π –≥–¥–µ client.* –≤—ã–∑–æ–≤—ã –¥–æ–ø—É—Å—Ç–∏–º—ã"""
        wrapper_areas = []
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã wrapper —Ñ—É–Ω–∫—Ü–∏–π
        wrapper_patterns = [
            r'async def \w+.*:\s*$',  # async def function():
            r'def \w+.*:\s*$',        # def function():
        ]
        
        for pattern in wrapper_patterns:
            matches = re.finditer(pattern, content, re.MULTILINE)
            
            for match in matches:
                start_line = content[:match.start()].count('\n') + 1
                
                # –ò—â–µ–º end —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –∫–æ–Ω–µ—Ü –æ—Ç—Å—Ç—É–ø–∞)
                current_indent = self._get_line_indent(lines[start_line - 1])
                end_line = start_line
                
                for i in range(start_line, len(lines)):
                    line = lines[i]
                    if line.strip() == '':
                        continue
                    
                    line_indent = self._get_line_indent(line)
                    
                    # –ï—Å–ª–∏ –æ—Ç—Å—Ç—É–ø –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–º—É - –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
                    if line_indent <= current_indent and i > start_line:
                        end_line = i
                        break
                else:
                    end_line = len(lines)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å safe_call –∏–ª–∏ —ç—Ç–æ wrapper
                function_content = '\n'.join(lines[start_line-1:end_line])
                if ('safe_call' in function_content or 
                    '_safe_api_call' in function_content or
                    'wrapper' in function_content.lower() or
                    'async for' in function_content):
                    wrapper_areas.append((start_line, end_line))
        
        return wrapper_areas
    
    def _get_line_indent(self, line: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—Ç—É–ø–∞ —Å—Ç—Ä–æ–∫–∏"""
        return len(line) - len(line.lstrip())
    
    def should_check_file(self, file_path: Path) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ–∞–π–ª"""
        relative_path = str(file_path.relative_to(self.project_root))
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ venv - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if 'venv' in relative_path or '.venv' in relative_path:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        for exclude_pattern in EXCLUDE_PATTERNS:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fnmatch –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ glob –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            import fnmatch
            if fnmatch.fnmatch(relative_path, exclude_pattern):
                return False
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏—è  
        for include_pattern in INCLUDE_PATTERNS:
            import fnmatch
            if fnmatch.fnmatch(relative_path, include_pattern):
                return True
                
        return False
    
    def check_project(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∞–Ω—Ç–∏-—Å–ø–∞–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        print("=" * 60)
        
        all_violations = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º Python —Ñ–∞–π–ª–∞–º
        for py_file in self.project_root.rglob("*.py"):
            if self.should_check_file(py_file):
                violations = self.check_file(py_file)
                all_violations.extend(violations)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if all_violations:
            print(f"üö® –ù–ê–ô–î–ï–ù–û {len(all_violations)} –ù–ê–†–£–®–ï–ù–ò–ô –ê–ù–¢–ò-–°–ü–ê–ú –¢–†–ï–ë–û–í–ê–ù–ò–ô:")
            print()
            
            for violation in all_violations:
                print(f"üìÅ {violation['file']}:{violation['line']}")
                print(f"   ‚ùå {violation['content']}")
                print(f"   üîç –ü–∞—Ç—Ç–µ—Ä–Ω: {violation['pattern']}")
                print()
            
            print("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä—è–º—ã–µ client.* –≤—ã–∑–æ–≤—ã –Ω–∞ _safe_api_call() –∏–ª–∏ safe_call()")
            print("2. –î–ª—è –Ω–æ–≤—ã—Ö API —Ñ—É–Ω–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω:")
            print("   async def your_function():")
            print("       result = await _safe_api_call(self.client.your_method, args)")
            print("3. –í —Ç–µ—Å—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–∫–∏, –∞ –Ω–µ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã")
            print()
            
            return False
        else:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–Ω—Ç–∏-—Å–ø–∞–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")
            return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path(__file__).parent.parent
    checker = AntiSpamChecker(project_root)
    
    if len(sys.argv) > 1:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–ª—è pre-commit hook)
        files_to_check = sys.argv[1:]
        violations_found = False
        
        for file_path in files_to_check:
            file_path = Path(file_path)
            if file_path.exists() and checker.should_check_file(file_path):
                violations = checker.check_file(file_path)
                if violations:
                    violations_found = True
                    print(f"üö® –ù–∞—Ä—É—à–µ–Ω–∏—è –≤ {file_path}:")
                    for violation in violations:
                        print(f"   Line {violation['line']}: {violation['content']}")
        
        sys.exit(1 if violations_found else 0)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç
        success = checker.check_project()
        sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()